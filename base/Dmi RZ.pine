/// ╔═══════════════════════════════════════╗
/// ║	Dmi Line    						║
/// ║	@	Allen.							║
/// ║	©	Rafael Zioni					║
/// ╚═══════════════════════════════════════╝

//@version=5
indicator(title = 'Ehlers DMI', overlay = false)

len				= input(10)

z(close, len) =>
	h = 0.0
	d = 0.0
	for i = 0 to len - 1 by 1
		k = (len - i) * len
		h += k
		d += close[i] * k
		d
	d / h

c					= z(close, math.floor(math.sqrt(len)))

//
// © 2013  John F. Ehlers
a1					= math.exp(-1.414 * 3.14159 / len)
b1					= 2 * a1 * math.cos(1.414 * 3.14159 / len)
c2					= b1
c3					= -a1 * a1
c1					= 1 - c2 - c3
e					= 0.0
e					:= c1 * (c + nz(c[1])) / 2 + c2 * nz(e[1]) + c3 * nz(e[2])

lineColor			= e > e[1] ? color.lime : color.red
//plot(e, title="e", color=lineColor ,linewidth=2)
//
//DI+ and DI-
upz					= ta.change(e)
down				= -ta.change(e)
trur				= ta.rma(ta.tr, len)
plus				= fixnan(ta.rma(upz > down and upz > 0 ? upz : 0, len) / trur)
minus				= fixnan(ta.rma(down > upz and down > 0 ? down : 0, len) / trur)
sum					= plus + minus
adx					= ta.rma(math.abs(plus - minus) / (sum == 0 ? 1 : sum), len)
di					= plus - minus
x					= adx - di * 100
zz					= x / -1
plot(zz, color=lineColor, linewidth=2)
plot(0, color=color.new(color.black, 0))
//
showZones			= input(true, title='Show Bullish/Bearish Zones')

// bullish signal rule: 
bullishRule			= zz > 0
// bearish signal rule: 
bearishRule			= zz <= 0
// current trading State
ruleState			= 0
ruleState			:= bullishRule		?	1			:	bearishRule		?	-1		:	nz(ruleState[1])
bgcolor(showZones	? ruleState == 1	?	color.blue	:	ruleState == -1	? color.red :	color.gray		:	na, title = ' Bullish/Bearish Zones', transp = 90)
