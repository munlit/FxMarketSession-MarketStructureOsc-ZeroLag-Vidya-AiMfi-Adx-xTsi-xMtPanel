/// ╔═══════════════════════════════╗
/// ║	Globals						║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	Fx Market Sessions			║
/// ╔═══════════════════════════════╗
/// ║	Market Structure Oscillador	║
/// ╔═══════════════════════════════╗
/// ║	ZeroLag Trend				║
/// ╔═══════════════════════════════╗
/// ║	Aroon Oscillator			║
/// ╔═══════════════════════════════╗
/// ║	Volumatic VIDYA				║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	Tsi & Divergences			║
/// ╔═══════════════════════════════╗
/// ║	Tsi two						║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	xTsi Multipanels			║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝


//@version=5
indicator(title							= 'Tsi two & TsiDiv [🎱 Allen 㔬]',
		  shorttitle					= 'xTsiMulti xPnl [🎱 Allen 㔬]',
		  overlay						= true,
		  format						= format.price,		// format.percent,
		//   timeframe_gaps				= true,
		  precision						= 1,
		  explicit_plot_zorder			= true)


//// ─────────────────────────────────────────────────────────────────────


/// Globals ───────────────────────────


strGlobalOptionalSlowTool				= 'Tsi Slow, gráfico principal'
strGlobalOptionalFastTool				= 'Tsi Fast'
strGlobalKeikinAshiTooltip				= 'Establecido para uso en gráficos diferentes a Heikin Ashi, de lo contrario genera distorsión.'

globalGroupTimeframe					= 'Temporalidad Global'
showxTsiMuTSIDisplay					= input.bool	(defval = true,			title = 'Mostrar xTSI',				group = globalGroupTimeframe)
showxTsiMuTSISlow						= input.bool	(defval = true,			title = 'Mostrar Tsi',				group = globalGroupTimeframe,		tooltip = strGlobalOptionalSlowTool)
showxTsiMuTSIFast						= input.bool	(defval = true,			title = 'Mostrar Tsi Fast',			group = globalGroupTimeframe,		tooltip = strGlobalOptionalFastTool)
showxTsiMuTSIDiverg						= input.bool	(defval = true,			title = 'Divergencias',				group = globalGroupTimeframe)
showxTsiMuTSIPanelTsi					= input.bool	(defval = true,			title = 'Tsi Panel',				group = globalGroupTimeframe)
showxTsiMuTSIPanelMtf					= input.bool	(defval = true,			title = 'Mtf Panel',				group = globalGroupTimeframe)

showxTsiMuTSIDivSpeed					= input.string 	(defval = 'Slow',		title = 'Diverg Speed',				group = globalGroupTimeframe,
			  options					=				['Fast', 'Slow'])

strGlobalMultiTimeFrame					= input.string 	(defval = 'Grafico',	title = 'Multi Timeframe',			group = globalGroupTimeframe,
			  options					=				['Grafico', '15 min', '30 min', '1 Hora', '2 Horas', '3 Horas', '4 Horas', '1 Dia', '1 Semana'])
strGlobalColorSelector					= input.string 	(defval = 'Allen',		title = 'Color Selector',			group = globalGroupTimeframe,
			  options					=				['Allen', 'Ultr', 'Light'])


/// Heikin Ashi ───────────────────────


showGlobal_HknAshi						= input.bool	(defval = true,			title = 'Activar Heikin Ashi',		group = 'Heikin Ashi mode',			tooltip = strGlobalKeikinAshiTooltip)

vGlobalHeiAsTicker						= ticker.heikinashi(syminfo.tickerid)
[heAsGblO, heAsGblH, heAsGblL, heAsGblC]= request.security(vGlobalHeiAsTicker, timeframe.period, [open, high, low, close])

gbl_Source_O							= showGlobal_HknAshi ? heAsGblO : open
gbl_Source_H							= showGlobal_HknAshi ? heAsGblH : high
gbl_Source_L							= showGlobal_HknAshi ? heAsGblL : low
gbl_Source_C							= showGlobal_HknAshi ? heAsGblC : close
gbl_Source_3							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC) / 3 : hlc3


/// Switch ────────────────────────────


[_co_gbl_buy,	_co_gbl_sell,	_co_gbl_long,	_co_gbl_short,	_co_gbl_up,	_co_gbl_dn,	_co_gbl_neutral]		= switch	strGlobalColorSelector
	'Allen'								=> [#33FFAC,		#CCF8FF,		#30d453,		#EA1889,		#0061FE,		#E3FF53,		#CCF8FF]
	'Ultr'								=> [#98F1F4,		#E0D8CA,		#30d453,		#EA1889,		#E3FF53,		#E0D8CA,		#121F3D]
	'Light'								=> [#0061FE,		#FF4054,		#CCF8FF,		#121F3D,		#E6F7FF,		#121F3D,		#E3FF53]


/// Colors ───────────────────────────


_co_gbl_white							= #E6F7FF							//	CitiAccentUltraLightBlue
_co_gbl_pink							= #FFB7FF							//	WavBehPink20
_co_gbl_sky								= #98F1F4							//	NexusSky
_co_gbl_mint							= #4FFFC0							//	AllenMint50
_co_gbl_green							= #30d453							//	AllenGreen50
_co_gbl_yellow							= #FDF43C							//	BrLiYel30
_co_gbl_blue							= #0035FF							//	ARoPrimary
_co_gbl_cocoa							= #E0D8CA							//	NetsuiteCocoa
_co_gbl_black							= #0C1633							//	PlatziBlue80
_co_gbl_light							= #FBFD73							//	BrLiYel10
_co_gbl_txt_dark						= #121F3D							//	PlatziBlue70
_co_gbl_txt_light						= #FFF87C							//	SalesforceYellow


WiskAeroYellow							= #F9F940
DefiMint								= #41F2A0
SalesforceMint							= #7AFFA1
SalesforceLime							= #CCF657
SalesforceLile							= #D5BEF2
SalesforceOrange						= #FF8C7D
SalesforceRed							= #FF4B4B
SalesforceBlue							= #3F73F7
Ex1Lime									= #E3FF53
Ex1Orange600							= #D93D04
Ex1Red									= #A60303
Ex1Wine									= #730202
Ex1Teal									= #1CD8E1
Ex1Ocean								= #00315e
TaxusRed								= #F20505
OsomeBlue								= #0061FE
OsomeRed								= #FF4054


/// Types ─────────────────────────────


type globalTypeOHL
	float O						    	= open
	float H				    			= high
	float L				    			= low
	float C				    			= close
	float V				    			= volume
	int   I				    			= bar_index


/// Functions ─────────────────────────


/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		'Grafico'						=> timeframe.period
		'1 seg'							=> 'S'	
		'5 seg'							=> '5S'
		'10 seg'						=> '10S'
		'15 seg'						=> '15S'
		'30 seg'						=> '30S'
		'1 min'							=> '1'	
		'3 min'							=> '3'	
		'5 min'							=> '5'
		'15 min'						=> '15'
		'30 min'						=> '30'
		'1 Hora'						=> '60'
		'2 Horas'						=> '120'
		'3 Horas'						=> '180'
		'4 Horas'						=> '240'
		'8 horas'						=> '480'
		'Dia'							=> 'D'
		'1 Dia'							=> '1D'
		'Semana'						=> 'W'
		'1 Semana'						=> '1W'
		'Mes'							=> 'M'
		'1 Mes'							=> '1M'

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		'Arriba'						=> 'top'
		'Medio'							=> 'middle'
		'Abajo'							=> 'bottom'

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		'Izquierda'						=> 'left'
		'Centro'						=> 'center'
		'Derecha'						=> 'right'

/// ─── function position
FunGlobalPositionIn(_position) =>
	switch _position
		'Externo'						=> 'outside'
		'Interno'						=> 'inside'

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		'Mini'							=> size.tiny
		'Pequeño'						=> size.small
		'Normal'						=> size.normal
		'Grande'						=> size.large
		'Enorme'						=> size.huge
		'Auto'							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		'NYSE'							=> 'UTC-5'
		'New York'						=> 'America/New_York'
		'Chicago'						=> 'America/Chicago'
		'Londres'						=> 'Europe/London'
		'Tokyo'							=> 'Asia/Tokyo'
		'Shanghai'						=> 'Asia/Shanghai'
		'Sydney'						=> 'Australia/Sydney'
		'Argentina'						=> 'America/Argentina/Buenos_Aires'


/// ─── function tsi
// FunGlobalCalcTSI(_speed, _x, _plus) =>
FunGlobalCalcTSI(_speed, _x) =>
	_plus								= 50
	_source								= gbl_Source_C

	_long								= 25		// gbl_speed_long			= 6			// _smooth
	_short								= 0			// gbl_speed_short			= 13		// _smooth
	_signal								= 0			// gbl_speed_signal			= 5			// _smooth

	switch _speed
		'Fast' =>
			_short						:= 5
			_signal						:= 14

		'Slow' =>
			_short						:= 13
			_signal						:= 13

	_tsi								= _x * ta.tsi(_source, _short, _long) + _plus
	_tsi_ema							= ta.ema(_tsi, _signal)

	[_tsi, _tsi_ema]

/// ─── function timeframe conditional
FunGlobalCalculateTimeframeIf(_timeframe) =>
	_tonumber							= str.tonumber(_timeframe)
	_minor_dayly						= _tonumber < 500
	_operat_minor						= 30
	_operat_medium						= _tonumber * 3
	_operat_mayor						= _tonumber * 2
	_conditional						= _tonumber >= 45 ? _operat_mayor : _tonumber <= 14 ? _operat_minor : _operat_medium
	_result								= _minor_dayly ? str.tostring(math.round(_conditional)) : timeframe.period


/// ─── Instances ─────────────────────


gblSource								= globalTypeOHL.new()


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝


//// ─────────────────────────────────────────────────────────────────────


/// Vars ──────────────────────────────

/// ─── Colors ───

co_xTsiMuTSIBaseUp						= _co_gbl_long
co_xTsiMuTSIBaseDn						= _co_gbl_short

co_xTsiMuTSIFastUp						= _co_gbl_up
co_xTsiMuTSIFastDn						= _co_gbl_dn

co_xTsiMuTSIMainLong					= _co_gbl_buy
co_xTsiMuTSIMainShort					= _co_gbl_sell

co_xTsiMuText							= color.new(_co_gbl_txt_dark,		0)


/// Instances ─────────────────────────


/// Multitimeframe

/// instance function calculate multitimeframe Tsi
[ixTsiMuCalcMultiTfTSI, ixTsiMuCalcMultiTfEMA]= FunGlobalCalcTSI('Slow', 125)
// [ixTsiMuCalcMultiTfTSI, ixTsiMuCalcMultiTfEMA]= FunGlobalCalcTSI('slow', vxTsiMuFast_x, vxTsiMuFast_plus)
/// instance function global timeframe
ixTsiMuCalcMultiTfTSIRange				= str.tonumber(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) > 500				? 
										  FunGlobalCalculateTimeframeIf(FunGlobalTimeFrame(strGlobalMultiTimeFrame))	:
										  timeframe.period
/// ─── Timeframe multitimeframe Tsi
arrxTsiMuMultiTimeframeTsiTicker		= request.security(syminfo.tickerid,	ixTsiMuCalcMultiTfTSIRange,	ixTsiMuCalcMultiTfTSI,	barmerge.gaps_on)

/// Principal

/// instance function Tsi fast
[ixTsiMuCalcTsiFast, ixTsiMuCalcEmaFast]= FunGlobalCalcTSI('Fast', 125)
// [ixTsiMuCalcTsiFast, ixTsiMuCalcEmaFast]= FunGlobalCalcTSI('fast', vxTsiMuFast_x, vxTsiMuFast_plus)
/// instance function Tsi slow
[ixTsiMuCalcTsiSlow, ixTsiMuCalcEmaSlow]= FunGlobalCalcTSI('Slow', 180)
// [ixTsiMuCalcTsiSlow, ixTsiMuCalcEmaSlow]= FunGlobalCalcTSI('slow', vxTsiMuSlow_x, vxTsiMuSlow_plus)

/// ─── plot color fast
insxTsiMuPlotColorFast					= ixTsiMuCalcTsiFast	> ixTsiMuCalcEmaFast	? co_xTsiMuTSIFastUp	: ixTsiMuCalcTsiFast	<= ixTsiMuCalcEmaFast	? co_xTsiMuTSIFastDn	: na

/// ─── plot color slow
insxTsiMuPlotColor						= ixTsiMuCalcTsiSlow	> ixTsiMuCalcEmaSlow	? co_xTsiMuTSIBaseUp	: ixTsiMuCalcTsiSlow	<= ixTsiMuCalcEmaSlow	? co_xTsiMuTSIBaseDn	: na


/// Display ───────────────────────────


/// ─── Plot
/// plot sobrecompra/sobreventa
insxTsiMuTsiPlotUpLine					= plot(showxTsiMuTSIDisplay ? 110 : na,		color = color.from_gradient(ixTsiMuCalcTsiSlow,	60,	100,	color.new(_co_gbl_black, 70),		color.new(_co_gbl_sell, 10)),						linewidth = 6)
insxTsiMuTsiPlotDnLine					= plot(showxTsiMuTSIDisplay ? -10 : na,		color = color.from_gradient(ixTsiMuCalcTsiSlow,	0,	40,		color.new(_co_gbl_buy, 10),			color.new(_co_gbl_black, 70)),						linewidth = 6)

/// plot principal TSI
/// plot TSI fast
insxTsiMuTsiPlotFast					= plot(showxTsiMuTSIDisplay and showxTsiMuTSIFast ? ixTsiMuCalcTsiFast	: na,				color = color.new(insxTsiMuPlotColorFast, 50),		linewidth = 2)		//	plot TsiSI
insxTsiMuEmaPlotFast					= plot(showxTsiMuTSIDisplay and showxTsiMuTSIFast ? ixTsiMuCalcEmaFast	: na,				color = color.new(insxTsiMuPlotColorFast, 70),		linewidth = 1)		//	plot EMA
/// fill fast
fill(insxTsiMuTsiPlotFast, insxTsiMuEmaPlotFast,																					color = showxTsiMuTSIFast ? color.new(insxTsiMuPlotColorFast, 85) : na)	//	fill

/// plot TSI slow
insxTsiMuTsiPlotLine					= plot(showxTsiMuTSIDisplay and showxTsiMuTSISlow ? ixTsiMuCalcTsiSlow	: na,				color = color.new(insxTsiMuPlotColor, 20),			linewidth = 2)		//	plot TsiSI
insxTsiMuEmaPlotLine					= plot(showxTsiMuTSIDisplay and showxTsiMuTSISlow ? ixTsiMuCalcEmaSlow	: na,				color = color.new(insxTsiMuPlotColor, 20),			linewidth = 2)		//	plot EMA

/// fill principal
fill(insxTsiMuTsiPlotLine, insxTsiMuEmaPlotLine,																					color = showxTsiMuTSISlow ? color.new(insxTsiMuPlotColor, 60) : na)		//	fill


/// Divergences ───────────────────────


vxTsiMuLBR								= 5				//	Corrección a la derecha
vxTsiMuLBL								= 5				//	Corrección a la izquierda


vxTsiMu_speed							= showxTsiMuTSIDivSpeed == 'Slow' ?	ixTsiMuCalcTsiSlow				: ixTsiMuCalcTsiFast
vxTsiMu_speed_back						= showxTsiMuTSIDivSpeed == 'Slow' ?	ixTsiMuCalcTsiSlow[vxTsiMuLBR]	: ixTsiMuCalcTsiFast[vxTsiMuLBR]

insxTsiMuPLFound						= na(ta.pivotlow(vxTsiMu_speed, vxTsiMuLBL, vxTsiMuLBR)) ? false : true
insxTsiMuPHFound						= na(ta.pivothigh(vxTsiMu_speed, vxTsiMuLBL, vxTsiMuLBR)) ? false : true

FunxTsiMu_inRange(_cond) =>
	_range_upper						= 30			//	Rango de corrección maximo
	_range_lower						= 2				//	Rango de corrección minimo
	_bars_since							= ta.barssince(_cond == true)

	_range_lower <= _bars_since and _bars_since <=  _range_upper


/// Compra regular ────────────────────


/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= vxTsiMu_speed_back				> ta.valuewhen(insxTsiMuPLFound, vxTsiMu_speed_back, 1)	and FunxTsiMu_inRange(insxTsiMuPLFound[1])
tsiDiInsPRICELL							= low[vxTsiMuLBR]					< ta.valuewhen(insxTsiMuPLFound, low[vxTsiMuLBR], 1)
tsiDiInsBULLCond						= showxTsiMuTSIDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insxTsiMuPLFound

plotshape(showxTsiMuTSIDisplay			and	tsiDiInsBULLCond				? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Buy ',
			  size						= size.auto,
			  style						= shape.labelup,
			  location					= location.belowbar,
			  color						= color.new(co_xTsiMuTSIMainLong, 10),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Compra scalp ──────────────────────


/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= vxTsiMu_speed_back				< ta.valuewhen(insxTsiMuPLFound, vxTsiMu_speed_back, 1)	and FunxTsiMu_inRange(insxTsiMuPLFound[1])
tsiDiInsPRICEHL							= low[vxTsiMuLBR]					> ta.valuewhen(insxTsiMuPLFound, low[vxTsiMuLBR], 1)
tsiDiInsHiddenBullCond					= showxTsiMuTSIDiverg				and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insxTsiMuPLFound

plotshape(showxTsiMuTSIDisplay			and tsiDiInsHiddenBullCond			? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Compra trend',
			  text						= ' ▲ % ',
			  size						= size.auto,
			  style						= shape.labelup,
			//   style						= shape.triangleup,
			  location					= location.belowbar,
			  color						= color.new(co_xTsiMuTSIMainLong, 30),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Venta regular ─────────────────────


/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= vxTsiMu_speed_back				< ta.valuewhen(insxTsiMuPHFound, vxTsiMu_speed_back, 1) and FunxTsiMu_inRange(insxTsiMuPHFound[1])
tsiDiInsPRICEHH							= high[vxTsiMuLBR]					> ta.valuewhen(insxTsiMuPHFound, high[vxTsiMuLBR], 1)
tsiDiInsBEARCond						= showxTsiMuTSIDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insxTsiMuPHFound

plotshape(showxTsiMuTSIDisplay			and tsiDiInsBEARCond				? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Sell ',
			  size						= size.auto,
			  style						= shape.labeldown,
			  location					= location.abovebar,
			  color						= color.new(co_xTsiMuTSIMainShort, 10),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Venta scalp ───────────────────────


/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= vxTsiMu_speed_back				> ta.valuewhen(insxTsiMuPHFound, vxTsiMu_speed_back, 1) and FunxTsiMu_inRange(insxTsiMuPHFound[1])
tsiDiInsPRICELH							= high[vxTsiMuLBR]					< ta.valuewhen(insxTsiMuPHFound, high[vxTsiMuLBR], 1)
tsiDiInsHiddenBearCond					= showxTsiMuTSIDiverg				and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insxTsiMuPHFound

plotshape(showxTsiMuTSIDisplay			and tsiDiInsHiddenBearCond			? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Venta trend',
			  text						= ' ▼ % ',
			  size						= size.auto,
			  style						= shape.labeldown,
			//   style						= shape.triangledown,
			  location					= location.abovebar,
			  color						= color.new(co_xTsiMuTSIMainShort, 30),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


/// ╔═══════════════════════════════════╗
/// ║	Panel TSI Multi Timeframe		║
/// ║	@	Allen.						║
/// ╚═══════════════════════════════════╝


//// ─────────────────────────────────────────────────────────────────────


/// Vars ──────────────────────────────


colorTsiObsPnl_Buy						= _co_gbl_long
colorTsiObsPnl_Sell						= _co_gbl_short
colorTsiObsPnl_Neutral					= _co_gbl_neutral
colorTsiObsPnl_White					= _co_gbl_white
colorTsiObsPnl_Black					= _co_gbl_black
colorTsiObsPnl_TextDark					= _co_gbl_txt_dark
colorTsiObsPnl_TextLight				= _co_gbl_txt_light
colorTsiObsPnl_TiPnBg					= _co_gbl_yellow

/// ─── Inputs
tsiObsPnlGroupTimeframes				=				'Timeframe Panel'
showTsiObsPnlTimeframesPanel			= input.bool	(true,				title = 'Panel TSI',			group = tsiObsPnlGroupTimeframes,		inline = 'show p')
showTsiObsPnlPanelExt					= input.bool	(true,				title = 'Ampliado',				group = tsiObsPnlGroupTimeframes,		inline = 'show p')
showTsiObsPnlTF15m						= input.bool	(true,				title = '15m  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr')
showTsiObsPnlTF30m						= input.bool	(false,				title = '30m  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr')
showTsiObsPnlTF1h						= input.bool	(true,				title = '1 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr2')
showTsiObsPnlTF2h						= input.bool	(true,				title = '2 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr2')
showTsiObsPnlTF3h						= input.bool	(false,				title = '3 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr2')
showTsiObsPnlTF4h						= input.bool	(false,				title = '4 H  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr3')
showTsiObsPnlTF1d						= input.bool	(false,				title = '1 D  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr3')
showTsiObsPnlTF1w						= input.bool	(false,				title = '1 S  ',				group = tsiObsPnlGroupTimeframes,		inline = 'timefr3')

tsiObsPnlGroupSignal					=				'Signal Panel'
showTsiObsPnlSignalPanel				= input.bool	(true,				title = 'Panel TSI Signal',		group = tsiObsPnlGroupSignal)
showTsiObsPnlSignalTsi					= input.bool	(true,				title = 'Tsi ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalMtf					= input.bool	(true,				title = 'Mtf ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalRsi					= input.bool	(false,				title = 'Rsi ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalMfi					= input.bool	(true,				title = 'Mfi ',					group = tsiObsPnlGroupSignal,			inline = 'signal')
showTsiObsPnlSignalAdx					= input.bool	(true,				title = 'Adx ',					group = tsiObsPnlGroupSignal,			inline = 'signal')

tsiObsPnl_PosiVert						= input.string	(defval = 'Abajo',	title = ' Y: ',					group = tsiObsPnlGroupTimeframes,		inline = 'ubic',
		  options						=				['Arriba', 'Medio','Abajo'])
tsiObsPnl_PosiHoriz						= input.string	(defval = 'Centro',	title = ' X: ',					group = tsiObsPnlGroupTimeframes,		inline = 'ubic',
		  options						=				['Izquierda', 'Centro','Derecha'])

stTsiObsPnl_TextSize					= input.string	(defval = 'normal',	title = 'Tamaño de texto',
		  options						= ['auto','tiny','small','normal','large','huge'])

vTsiObsPnl_RsiLength					= 14


/// Instances ─────────────────────────


/// ─── constructor

// tsiObsPnl_TSI							= _x * ta.tsi(gbl_Source_C, _short, _long) + _plus
tsiObsPnlRSI							= ta.rsi(gbl_Source_C, vTsiObsPnl_RsiLength)

tsiObsPnl_TSI							= ixTsiMuCalcTsiSlow
tsiObsPnlMTFRange						= FunGlobalCalculateTimeframeIf(timeframe.period)
// tsiObsPnlEma							= iTsiMuDiCalculateMultiTfEMA
// tsiObsPnlMFI							= adapMonIfVAL
// tsiObsPnlADX							= xAdxDiHi_Didi

/// ─── TSI invoke multitimeframe
fTsiObsPnlExtNow						= FunGlobalCalculateTimeframeIf(timeframe.period)
fTsiObsPnlExt15m						= FunGlobalCalculateTimeframeIf('15')
fTsiObsPnlExt30m						= FunGlobalCalculateTimeframeIf('30')
fTsiObsPnlExt1h							= FunGlobalCalculateTimeframeIf('60')
fTsiObsPnlExt2h							= FunGlobalCalculateTimeframeIf('120')
fTsiObsPnlExt3h							= FunGlobalCalculateTimeframeIf('180')
fTsiObsPnlExt4h							= FunGlobalCalculateTimeframeIf('240')
fTsiObsPnlExt1d							= '1D'

/// instance function global timeframe
iTsiObsPnlCalcSignal					= timeframe.period

/// ─── TSI timeframes
vTsiObsPnlTF15m							= request.security(syminfo.tickerid,		'15',		tsiObsPnl_TSI)
vTsiObsPnlTF30m							= request.security(syminfo.tickerid,		'30',		tsiObsPnl_TSI)
vTsiObsPnlTF1h							= request.security(syminfo.tickerid,		'60',		tsiObsPnl_TSI)
vTsiObsPnlTF2h							= request.security(syminfo.tickerid,		'120',		tsiObsPnl_TSI)
vTsiObsPnlTF3h							= request.security(syminfo.tickerid,		'180',		tsiObsPnl_TSI)
vTsiObsPnlTF4h							= request.security(syminfo.tickerid,		'240',		tsiObsPnl_TSI)
vTsiObsPnlTF1d							= request.security(syminfo.tickerid,		'D',		tsiObsPnl_TSI)

/// ─── TSI timeframes extend
[vTsiObsPnlTFExtMtfW,		vTsiObsPnlTFExtMtfW_2,			vTsiObsPnlTFExtMtfW_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExtNow,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf15m,		vTsiObsPnlTFExtMtf15m_2,		vTsiObsPnlTFExtMtf15m_3]						= request.security(syminfo.tickerid,	fTsiObsPnlExt15m,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf30m,		vTsiObsPnlTFExtMtf30m_2,		vTsiObsPnlTFExtMtf30m_3]						= request.security(syminfo.tickerid,	fTsiObsPnlExt30m,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf1h,		vTsiObsPnlTFExtMtf1h_2,			vTsiObsPnlTFExtMtf1h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt1h,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf2h,		vTsiObsPnlTFExtMtf2h_2,			vTsiObsPnlTFExtMtf2h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt2h,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf3h,		vTsiObsPnlTFExtMtf3h_2,			vTsiObsPnlTFExtMtf3h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt3h,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf4h,		vTsiObsPnlTFExtMtf4h_2,			vTsiObsPnlTFExtMtf4h_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt4h,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)
[vTsiObsPnlTFExtMtf1d,		vTsiObsPnlTFExtMtf1d_2,			vTsiObsPnlTFExtMtf1d_3]							= request.security(syminfo.tickerid,	fTsiObsPnlExt1d,	[tsiObsPnl_TSI,	tsiObsPnl_TSI[1],	tsiObsPnl_TSI[2]],	lookahead = barmerge.lookahead_on)


/// Functions ─────────────────────────


/// ─── New table
var vTsiPnlNewTable						= table.new(
	  position							= FunGlobalVertical(tsiObsPnl_PosiVert) + '_' + FunGlobalHorizontal(tsiObsPnl_PosiHoriz),
	  columns							= 11,
	  rows								= 3,
	  border_width						= 2,
	  frame_color						= color.new(colorTsiObsPnl_Black, 15),
	  force_overlay						= true)

/// ─── Function table name
FunTsiObsPnlCalculateCellName(_col, _row, _text) =>
	_cell_text							= _text

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(colorTsiObsPnl_TiPnBg, 10),
  		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= color.new(colorTsiObsPnl_TextDark, 10),
		  width							= 3)

/// ─── Function table time
FunTsiObsPnlCalculateCellTime(_col, _row, _time) =>
	_bgcolor							= _co_gbl_black
	_opacity							= 40
	_cell_text							= _time
	_txtcolor							= colorTsiObsPnl_TextLight
	_txtsize							= stTsiObsPnl_TextSize

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_bgcolor, _opacity),
		  text_size						= _txtsize,
		  text_color					= colorTsiObsPnl_TextLight,
		  width							= 5)

/// ─── Function table value
FunTsiObsPnlCalculateCellValue(_col, _row, _value) =>
	_cell_color							= _value >= 100 ? colorTsiObsPnl_Buy : _value <= 0 ? colorTsiObsPnl_Sell : colorTsiObsPnl_Neutral
	_opacity							= _value >= 100 or _value <= 0 ? 20 : _value >= 85 or _value <= 15 ? 40 : 65
	_cell_text							= str.tostring(_value, '#.00')
	_txtsize							= stTsiObsPnl_TextSize

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _opacity),
		  text_size						= _txtsize,
		  text_color					= colorTsiObsPnl_TextDark,
		  width							= 5)

/// ─── Function table cells
FunTsiObsPnlCalculateCellExtend(_col, _row, _var, _var2, _var3) =>
	/// ─── signal buy/sell
	_max								= 120
	_min								= -20
	_if_buy								= _var	> _var2	and _var	> _var3	and	_var < _min
	_if_sell							= _var	< _var2	and _var	< _var3	and	_var > _max
	_trend_buy							= _var	> _var2	and _var	> _var3
	_trend_sell							= _var	< _var2	and _var	< _var3

	_if_condition						= _if_sell		?	'🔴'	:	_if_buy		?	'🟢'	:	' '
	_trend_condition					= _trend_sell	?	'⬊ '	:	_trend_buy	?	'⬈ '	:	' '

	_div								= 6
	_fract_max							= math.round(_max - (_max / _div))
	_fract_min							= math.ceil(_min + (_max / _div))

	_cell_color							= _var >= _max and _trend_sell ? colorTsiObsPnl_Sell : _var <= _min and _trend_buy ? colorTsiObsPnl_Buy : colorTsiObsPnl_Neutral
	_ext_opacity						= _var >= _max or _var <= _min ? 30 : _var >= _fract_max or _var <= _fract_min ? 40 : 65
	_cell_text							= _if_condition + _trend_condition
	// _cell_text							= str.tostring(_var, '#.00') + _if_condition + _trend_condition

	table.cell							(vTsiPnlNewTable, _col, _row, _cell_text,
		  bgcolor						= color.new(_cell_color, _ext_opacity),
		  text_size						= stTsiObsPnl_TextSize,
		  text_color					= colorTsiObsPnl_TextDark,
		  width							= 4)


/// Visual ────────────────────────────


/// ─── Table TSI
if showTsiObsPnlTimeframesPanel
	FunTsiObsPnlCalculateCellName				(0,	0,		'  ')
	FunTsiObsPnlCalculateCellName				(0,	1,		'Tsi')
	if showTsiObsPnlPanelExt
		FunTsiObsPnlCalculateCellName			(0,	2,		'Plus')

	FunTsiObsPnlCalculateCellTime				(1,	0,		'Ahora')
	FunTsiObsPnlCalculateCellValue				(1,	1,		tsiObsPnl_TSI)
	if showTsiObsPnlPanelExt
		FunTsiObsPnlCalculateCellExtend			(1,	2,		vTsiObsPnlTFExtMtfW,	vTsiObsPnlTFExtMtfW_2,		vTsiObsPnlTFExtMtfW_3)

	// if showTsiObsPnlTF05m
	// 	FunTsiObsPnlCalculateCellTime			(2,	0,		'5 m')
	// 	FunTsiObsPnlCalculateCellValue			(2,	1,		vTsiObsPnlTF05m)
	// 	if showTsiObsPnlPanelExt
	// 		FunTsiObsPnlCalculateCellExtend		(2,	2,		vTsiObsPnlTFExtMtf05m,	vTsiObsPnlTFExtMtf05m_2,	vTsiObsPnlTFExtMtf05m_3)

	if showTsiObsPnlTF15m
		FunTsiObsPnlCalculateCellTime			(3,	0,		'15 m')
		FunTsiObsPnlCalculateCellValue			(3,	1,		vTsiObsPnlTF15m)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(3,	2,		vTsiObsPnlTFExtMtf15m,	vTsiObsPnlTFExtMtf15m_2,	vTsiObsPnlTFExtMtf15m_3)

	if showTsiObsPnlTF30m
		FunTsiObsPnlCalculateCellTime			(4,	0,		'30 m')
		FunTsiObsPnlCalculateCellValue			(4,	1,		vTsiObsPnlTF30m)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(4,	2,		vTsiObsPnlTFExtMtf30m,	vTsiObsPnlTFExtMtf30m_2,	vTsiObsPnlTFExtMtf30m_3)

	if showTsiObsPnlTF1h
		FunTsiObsPnlCalculateCellTime			(5,	0,		'1 H')
		FunTsiObsPnlCalculateCellValue			(5,	1,		vTsiObsPnlTF1h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(5,	2,		vTsiObsPnlTFExtMtf1h,	vTsiObsPnlTFExtMtf1h_2,		vTsiObsPnlTFExtMtf1h_3)

	if showTsiObsPnlTF2h
		FunTsiObsPnlCalculateCellTime			(6,	0,		'2 H')
		FunTsiObsPnlCalculateCellValue			(6,	1,		vTsiObsPnlTF2h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(6,	2,		vTsiObsPnlTFExtMtf2h,	vTsiObsPnlTFExtMtf2h_2,		vTsiObsPnlTFExtMtf2h_3)

	if showTsiObsPnlTF3h
		FunTsiObsPnlCalculateCellTime			(7,	0,		'3 H')
		FunTsiObsPnlCalculateCellValue			(7,	1,		vTsiObsPnlTF3h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(7,	2,		vTsiObsPnlTFExtMtf3h,	vTsiObsPnlTFExtMtf3h_2,		vTsiObsPnlTFExtMtf3h_3)

	if showTsiObsPnlTF4h
		FunTsiObsPnlCalculateCellTime			(8,	0,		'4 H')
		FunTsiObsPnlCalculateCellValue			(8,	1,		vTsiObsPnlTF4h)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(8,	2,		vTsiObsPnlTFExtMtf4h,	vTsiObsPnlTFExtMtf4h_2,		vTsiObsPnlTFExtMtf4h_3)

	if showTsiObsPnlTF1d
		FunTsiObsPnlCalculateCellTime			(9,	0,		'1 D')
		FunTsiObsPnlCalculateCellValue			(9,	1,		vTsiObsPnlTF1d)
		if showTsiObsPnlPanelExt
			FunTsiObsPnlCalculateCellExtend		(9,	2,		vTsiObsPnlTFExtMtf1d,	vTsiObsPnlTFExtMtf1d_2,		vTsiObsPnlTFExtMtf1d_3)

/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
