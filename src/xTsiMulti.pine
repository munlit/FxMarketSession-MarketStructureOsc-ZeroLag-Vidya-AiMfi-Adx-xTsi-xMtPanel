/// ╔═══════════════════════════════╗
/// ║	Globals						║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	Tsi & Divergences			║
/// ╔═══════════════════════════════╗
/// ║	Tsi two						║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	xTsi Multipanels			║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝

//@version=5
indicator(title							= 'Tsi two & TsiDiv [🎱 Allen 㔬]',
		  shorttitle					= 'xTsiMulti xPnl [🎱 Allen 㔬]',
		  overlay						= true,
		  format						= format.price,		// format.percent,
		//   timeframe_gaps				= true,
		  precision						= 1,
		  explicit_plot_zorder			= true)

//// ─────────────────────────────────────────────────────────────────────


/// Globals ───────────────────────────


strGlobalOptionalSlowTool				= 'Tsi Slow, gráfico principal'
strGlobalOptionalFastTool				= 'Tsi Fast'
strGlobalKeikinAshiTooltip				= 'Establecido para uso en gráficos diferentes a Heikin Ashi, de lo contrario genera distorsión.'

globalGroupTimeframe					= 'Temporalidad Global'
showxTsiMuTSIDisplay					= input.bool	(defval = true,			title = 'Mostrar xTSI',				group = globalGroupTimeframe)
showxTsiMuTSISlow						= input.bool	(defval = true,			title = 'Mostrar Tsi',				group = globalGroupTimeframe,		tooltip = strGlobalOptionalSlowTool)
showxTsiMuTSIFast						= input.bool	(defval = true,			title = 'Mostrar Tsi Fast',			group = globalGroupTimeframe,		tooltip = strGlobalOptionalFastTool)
showxTsiMuTSIDiverg						= input.bool	(defval = true,			title = 'Divergencias',				group = globalGroupTimeframe)
showxTsiMuTSIPanelTsi					= input.bool	(defval = true,			title = 'Tsi Panel',				group = globalGroupTimeframe)
showxTsiMuTSIPanelMtf					= input.bool	(defval = true,			title = 'Mtf Panel',				group = globalGroupTimeframe)

showxTsiMuTSIDivSpeed					= input.string 	(defval = 'Slow',		title = 'Diverg Speed',				group = globalGroupTimeframe,
			  options					=				['Fast', 'Slow'])

strGlobalMultiTimeFrame					= input.string 	(defval = 'Grafico',	title = 'Multi Timeframe',			group = globalGroupTimeframe,
			  options					=				['Grafico', '15 min', '30 min', '1 Hora', '2 Horas', '3 Horas', '4 Horas', '1 Dia', '1 Semana'])
strGlobalColorSelector					= input.string 	(defval = 'Allen',		title = 'Color Selector',			group = globalGroupTimeframe,
			  options					=				['Allen', 'Ultr', 'Light'])


/// Heikin Ashi ───────────────────────


showGlobal_HknAshi						= input.bool	(defval = true,			title = 'Activar Heikin Ashi',		group = 'Heikin Ashi mode',			tooltip = strGlobalKeikinAshiTooltip)

vGlobalHeiAsTicker						= ticker.heikinashi(syminfo.tickerid)
[heAsGblO, heAsGblH, heAsGblL, heAsGblC]= request.security(vGlobalHeiAsTicker, timeframe.period, [open, high, low, close])

gbl_Source_O							= showGlobal_HknAshi ? heAsGblO : open
gbl_Source_H							= showGlobal_HknAshi ? heAsGblH : high
gbl_Source_L							= showGlobal_HknAshi ? heAsGblL : low
gbl_Source_C							= showGlobal_HknAshi ? heAsGblC : close
gbl_Source_3							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC) / 3 : hlc3


/// Switch ────────────────────────────


[_co_gbl_buy,	_co_gbl_sell,	_co_gbl_long,	_co_gbl_short,	_co_gbl_up,	_co_gbl_dn,	_co_gbl_neutral]		= switch	strGlobalColorSelector
	'Allen'								=> [#33FFAC,		#CCF8FF,		#30d453,		#EA1889,		#0061FE,		#E3FF53,		#CCF8FF]
	'Ultr'								=> [#98F1F4,		#E0D8CA,		#30d453,		#EA1889,		#E3FF53,		#E0D8CA,		#121F3D]
	'Light'								=> [#0061FE,		#FF4054,		#CCF8FF,		#121F3D,		#E6F7FF,		#121F3D,		#E3FF53]


/// Colors ───────────────────────────


_co_gbl_white							= #E6F7FF							//	CitiAccentUltraLightBlue
_co_gbl_pink							= #FFB7FF							//	WavBehPink20
_co_gbl_sky								= #0CF2F2							//	WavBehAqua50
_co_gbl_mint							= #4FFFC0							//	AllenMint50
_co_gbl_green							= #30d453							//	AllenGreen50
_co_gbl_yellow							= #FDF43C							//	BrLiYel30
_co_gbl_blue							= #0035FF							//	ARoPrimary
_co_gbl_black							= #0C1633							//	PlatziBlue80
_co_gbl_light							= #FBFD73							//	BrLiYel10
_co_gbl_txt_dark						= #121F3D							//	PlatziBlue70


NetsuiteCocoa							= #E0D8CA
NexusSky								= #98F1F4
WiskAeroYellow							= #F9F940
SisenseLime								= #EDFF8C
DefiMint								= #41F2A0
SalesforceMint							= #7AFFA1
SalesforceLime							= #CCF657
SalesforceMustard						= #EDD803
SalesforceYellow						= #FFF87C
SalesforceLile300						= #D8CFEE
SalesforceLile							= #D5BEF2
SalesforceOrange						= #FF8C7D
SalesforceRed							= #FF4B4B
SalesforceBlue							= #3F73F7
Ex1Lime									= #E3FF53
Ex1Yellow								= #FCFE53
Ex1Orange500							= #E65A00
Ex1Orange600							= #D93D04
Ex1Red									= #A60303
Ex1Wine									= #730202
Ex1Teal									= #1CD8E1
Ex1Blue									= #00B8E6
Ex1Ocean								= #00315e
TaxusRed								= #F20505
OsomeBlue								= #0061FE
OsomeRed								= #FF4054

/// Types ─────────────────────────────


type globalTypeOHL
	float O						    	= open
	float H				    			= high
	float L				    			= low
	float C				    			= close
	float V				    			= volume
	int   I				    			= bar_index


/// Functions ─────────────────────────


/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		'Grafico'						=> timeframe.period
		'1 seg'							=> 'S'	
		'5 seg'							=> '5S'
		'10 seg'						=> '10S'
		'15 seg'						=> '15S'
		'30 seg'						=> '30S'
		'1 min'							=> '1'	
		'3 min'							=> '3'	
		'5 min'							=> '5'
		'15 min'						=> '15'
		'30 min'						=> '30'
		'1 Hora'						=> '60'
		'2 Horas'						=> '120'
		'3 Horas'						=> '180'
		'4 Horas'						=> '240'
		'8 horas'						=> '480'
		'Dia'							=> 'D'
		'1 Dia'							=> '1D'
		'Semana'						=> 'W'
		'1 Semana'						=> '1W'
		'Mes'							=> 'M'
		'1 Mes'							=> '1M'

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		'Arriba'						=> 'top'
		'Medio'							=> 'middle'
		'Abajo'							=> 'bottom'

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		'Izquierda'						=> 'left'
		'Centro'						=> 'center'
		'Derecha'						=> 'right'

/// ─── function position
FunGlobalPositionIn(_position) =>
	switch _position
		'Externo'						=> 'outside'
		'Interno'						=> 'inside'

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		'Mini'							=> size.tiny
		'Pequeño'						=> size.small
		'Normal'						=> size.normal
		'Grande'						=> size.large
		'Enorme'						=> size.huge
		'Auto'							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		'NYSE'							=> 'UTC-5'
		'New York'						=> 'America/New_York'
		'Chicago'						=> 'America/Chicago'
		'Londres'						=> 'Europe/London'
		'Tokyo'							=> 'Asia/Tokyo'
		'Shanghai'						=> 'Asia/Shanghai'
		'Sydney'						=> 'Australia/Sydney'
		'Argentina'						=> 'America/Argentina/Buenos_Aires'


/// ─── function tsi
FunGlobalCalculateTSI(_speed, _x, _plus) =>
	// _plus								= 50
	_source								= gbl_Source_C

	_long								= 25			// 6

	_short								= 0				// 13
	_signal								= 0				// 5

	switch _speed
		'fast' =>
			_short						:= 5
			_signal						:= 14

		'slow' =>
			_short						:= 13
			_signal						:= 13

	_tsi								= _x * ta.tsi(_source, _short, _long) + _plus
	_tsi_ema							= ta.ema(_tsi, _signal)

	[_tsi, _tsi_ema]

/// ─── function timeframe conditional
FunGlobalCalculateTimeframeIf(_timeframe) =>
	_tonumber							= str.tonumber(_timeframe)
	_minor_dayly						= _tonumber < 500
	_operat_minor						= 30
	_operat_medium						= _tonumber * 3
	_operat_mayor						= _tonumber * 2
	_conditional						= _tonumber >= 45 ? _operat_mayor : _tonumber <= 14 ? _operat_minor : _operat_medium
	_result								= _minor_dayly ? str.tostring(math.round(_conditional)) : timeframe.period


/// ─── Instances ─────────────────────


gblSource								= globalTypeOHL.new()

/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────


/// Vars ──────────────────────────────

/// ─── Colors ───

co_xTsiMuTSIBaseUp						= _co_gbl_long
co_xTsiMuTSIBaseDn						= _co_gbl_short

co_xTsiMuTSIFastUp						= _co_gbl_up
co_xTsiMuTSIFastDn						= _co_gbl_dn

co_xTsiMuTSIMainLong					= _co_gbl_buy
co_xTsiMuTSIMainShort					= _co_gbl_sell

co_xTsiMuText							= color.new(_co_gbl_txt_dark,		0)


/// INSTANCES ─────────────────────────


/// Multitimeframe

vxTsiMuMultiT_x							= 75
vxTsiMuMultiT_plus						= 130
/// instance function calculate multitimeframe Tsi
[ixTsiMuCalcMultiTfTSI, ixTsiMuCalcMultiTfEMA]= FunGlobalCalculateTSI('slow', vxTsiMuMultiT_x, vxTsiMuMultiT_plus)
/// instance function global timeframe
ixTsiMuCalcMultiTfTSIRange				= str.tonumber(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) > 500				? 
										  FunGlobalCalculateTimeframeIf(FunGlobalTimeFrame(strGlobalMultiTimeFrame))	:
										  timeframe.period
/// ─── Timeframe multitimeframe Tsi
arrxTsiMuMultiTimeframeTsiTicker		= request.security(syminfo.tickerid,	ixTsiMuCalcMultiTfTSIRange,	ixTsiMuCalcMultiTfTSI,	barmerge.gaps_on)

/// Principal

/// instance function Tsi fast
vxTsiMuFast_x							= 125		// 75	250
vxTsiMuFast_plus						= 50		// -30
[ixTsiMuCalcTsiFast, ixTsiMuCalcEmaFast]= FunGlobalCalculateTSI('fast', vxTsiMuFast_x, vxTsiMuFast_plus)
/// instance function Tsi slow
vxTsiMuSlow_x							= 200		// 150
vxTsiMuSlow_plus						= 50
[ixTsiMuCalcTsiSlow, ixTsiMuCalcEmaSlow]= FunGlobalCalculateTSI('slow', vxTsiMuSlow_x, vxTsiMuSlow_plus)

/// ─── plot color fast
insxTsiMuPlotColorFast					= ixTsiMuCalcTsiFast	> ixTsiMuCalcEmaFast	? co_xTsiMuTSIFastUp	: ixTsiMuCalcTsiFast	<= ixTsiMuCalcEmaFast	? co_xTsiMuTSIFastDn	: na

/// ─── plot color slow
insxTsiMuPlotColor						= ixTsiMuCalcTsiSlow	> ixTsiMuCalcEmaSlow	? co_xTsiMuTSIBaseUp	: ixTsiMuCalcTsiSlow	<= ixTsiMuCalcEmaSlow	? co_xTsiMuTSIBaseDn	: na


/// DISPLAY ───────────────────────────


/// ─── Plot
/// plot sobrecompra/sobreventa
insxTsiMuTsiPlotUpLine					= plot(showxTsiMuTSIDisplay ? 110 : na,		color = color.from_gradient(ixTsiMuCalcTsiSlow,	60,	100,	color.new(_co_gbl_black, 70),		color.new(_co_gbl_sell, 10)),						linewidth = 6)
insxTsiMuTsiPlotDnLine					= plot(showxTsiMuTSIDisplay ? -10 : na,		color = color.from_gradient(ixTsiMuCalcTsiSlow,	0,	40,		color.new(_co_gbl_buy, 10),			color.new(_co_gbl_black, 70)),						linewidth = 6)

/// plot principal TSI
/// plot TSI fast
insxTsiMuTsiPlotFast					= plot(showxTsiMuTSIDisplay and showxTsiMuTSIFast ? ixTsiMuCalcTsiFast	: na,				color = color.new(insxTsiMuPlotColorFast, 65),		linewidth = 2)		//	plot TsiSI
insxTsiMuEmaPlotFast					= plot(showxTsiMuTSIDisplay and showxTsiMuTSIFast ? ixTsiMuCalcEmaFast	: na,				color = color.new(insxTsiMuPlotColorFast, 65),		linewidth = 1)		//	plot EMA
/// fill fast
fill(insxTsiMuTsiPlotFast, insxTsiMuEmaPlotFast,																					color = showxTsiMuTSIFast ? color.new(insxTsiMuPlotColorFast, 85) : na)	//	fill

/// plot TSI slow
insxTsiMuTsiPlotLine					= plot(showxTsiMuTSIDisplay and showxTsiMuTSISlow ? ixTsiMuCalcTsiSlow	: na,				color = color.new(insxTsiMuPlotColor, 20),			linewidth = 2)		//	plot TsiSI
insxTsiMuEmaPlotLine					= plot(showxTsiMuTSIDisplay and showxTsiMuTSISlow ? ixTsiMuCalcEmaSlow	: na,				color = color.new(insxTsiMuPlotColor, 20),			linewidth = 2)		//	plot EMA

/// fill principal
fill(insxTsiMuTsiPlotLine, insxTsiMuEmaPlotLine,																					color = showxTsiMuTSISlow ? color.new(insxTsiMuPlotColor, 60) : na)		//	fill


/// DIVERGENCES ───────────────────────


vxTsiMuLBR								= 5				//	Corrección a la derecha
vxTsiMuLBL								= 5				//	Corrección a la izquierda


vxTsiMu_speed							= showxTsiMuTSIDivSpeed == 'Slow' ?	ixTsiMuCalcTsiSlow				: ixTsiMuCalcTsiFast
vxTsiMu_speed_back						= showxTsiMuTSIDivSpeed == 'Slow' ?	ixTsiMuCalcTsiSlow[vxTsiMuLBR]	: ixTsiMuCalcTsiFast[vxTsiMuLBR]

insxTsiMuPLFound						= na(ta.pivotlow(vxTsiMu_speed, vxTsiMuLBL, vxTsiMuLBR)) ? false : true
insxTsiMuPHFound						= na(ta.pivothigh(vxTsiMu_speed, vxTsiMuLBL, vxTsiMuLBR)) ? false : true

FunxTsiMu_inRange(_cond) =>
	_range_upper						= 30			//	Rango de corrección maximo
	_range_lower						= 2				//	Rango de corrección minimo
	_bars_since							= ta.barssince(_cond == true)

	_range_lower <= _bars_since and _bars_since <=  _range_upper


/// Compra regular ────────────────────


/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= vxTsiMu_speed_back				> ta.valuewhen(insxTsiMuPLFound, vxTsiMu_speed_back, 1)	and FunxTsiMu_inRange(insxTsiMuPLFound[1])
tsiDiInsPRICELL							= low[vxTsiMuLBR]					< ta.valuewhen(insxTsiMuPLFound, low[vxTsiMuLBR], 1)
tsiDiInsBULLCond						= showxTsiMuTSIDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insxTsiMuPLFound

plotshape(showxTsiMuTSIDisplay			and	tsiDiInsBULLCond				? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Buy ',
			  size						= size.auto,
			  style						= shape.labelup,
			  location					= location.belowbar,
			  color						= color.new(co_xTsiMuTSIMainLong, 10),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Compra scalp ──────────────────────


/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= vxTsiMu_speed_back				< ta.valuewhen(insxTsiMuPLFound, vxTsiMu_speed_back, 1)	and FunxTsiMu_inRange(insxTsiMuPLFound[1])
tsiDiInsPRICEHL							= low[vxTsiMuLBR]					> ta.valuewhen(insxTsiMuPLFound, low[vxTsiMuLBR], 1)
tsiDiInsHiddenBullCond					= showxTsiMuTSIDiverg				and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insxTsiMuPLFound

plotshape(showxTsiMuTSIDisplay			and tsiDiInsHiddenBullCond			? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Compra trend',
			  text						= ' ▲ % ',
			  size						= size.auto,
			  style						= shape.labelup,
			//   style						= shape.triangleup,
			  location					= location.belowbar,
			  color						= color.new(co_xTsiMuTSIMainLong, 30),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Venta regular ─────────────────────


/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= vxTsiMu_speed_back				< ta.valuewhen(insxTsiMuPHFound, vxTsiMu_speed_back, 1) and FunxTsiMu_inRange(insxTsiMuPHFound[1])
tsiDiInsPRICEHH							= high[vxTsiMuLBR]					> ta.valuewhen(insxTsiMuPHFound, high[vxTsiMuLBR], 1)
tsiDiInsBEARCond						= showxTsiMuTSIDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insxTsiMuPHFound

plotshape(showxTsiMuTSIDisplay			and tsiDiInsBEARCond				? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Sell ',
			  size						= size.auto,
			  style						= shape.labeldown,
			  location					= location.abovebar,
			  color						= color.new(co_xTsiMuTSIMainShort, 10),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)


/// Venta scalp ───────────────────────


/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= vxTsiMu_speed_back				> ta.valuewhen(insxTsiMuPHFound, vxTsiMu_speed_back, 1) and FunxTsiMu_inRange(insxTsiMuPHFound[1])
tsiDiInsPRICELH							= high[vxTsiMuLBR]					< ta.valuewhen(insxTsiMuPHFound, high[vxTsiMuLBR], 1)
tsiDiInsHiddenBearCond					= showxTsiMuTSIDiverg				and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insxTsiMuPHFound

plotshape(showxTsiMuTSIDisplay			and tsiDiInsHiddenBearCond			? vxTsiMu_speed_back : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Venta trend',
			  text						= ' ▼ % ',
			  size						= size.auto,
			  style						= shape.labeldown,
			//   style						= shape.triangledown,
			  location					= location.abovebar,
			  color						= color.new(co_xTsiMuTSIMainShort, 30),
			  textcolor					= co_xTsiMuText,
			  force_overlay				= true)

/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
