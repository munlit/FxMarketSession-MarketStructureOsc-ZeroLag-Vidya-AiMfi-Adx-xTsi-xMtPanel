/// ╔═══════════════════════════════╗
/// ║	Globals						║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	Tsi & Divergences			║
/// ╔═══════════════════════════════╗
/// ║	Tsi two						║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝
/// ╔═══════════════════════════════╗
/// ║	xTsi Multipanels			║
/// ║	@	Allen	㔬				║
/// ╚═══════════════════════════════╝

//@version=5
indicator(title							= 'Tsi two & TsiDiv [🎱 Allen 㔬]',
		  shorttitle					= 'xTsiMulti xPnl [🎱 Allen 㔬]',
		  overlay						= true,
		  format						= format.price,		// format.percent,
		//   timeframe_gaps				= true,
		  precision						= 4,
		  explicit_plot_zorder			= true)

//// ─────────────────────────────────────────────────────────────────────


/// Globals ───────────────────────────


strGlobalExtendTooltip					= 'Indicador TSI basado en tendencia'
strGlobalOptionalTooltip				= 'Configuración de temporalidad adicional'
strGlobalKeikinAshiTooltip				= 'Establecido para uso en gráficos diferentes a Heikin Ashi, de lo contrario genera distorsión.'

globalGroupTimeframe					= 'Temporalidad Global'
showxTsiMuTSIDivergs					= input.bool	(defval = true,			title = 'TSI & Divergences',			group = globalGroupTimeframe)
showxTsiMuTSITendency					= input.bool	(defval = true,			title = 'Tsi de Tendencia',				group = globalGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
showxTsiMuTSIMultitimeframe				= input.bool	(defval = false,		title = 'Multitimeframe',				group = globalGroupTimeframe,		tooltip = strGlobalOptionalTooltip)
strGlobalMultiTimeFrame					= input.string 	(defval = 'Grafico',	title = 'Multi Timeframe',				group = globalGroupTimeframe,
			  options					=				['Grafico', '15 min', '30 min', '1 Hora', '2 Horas', '3 Horas', '4 Horas', '1 Dia', '1 Semana', '1 Mes'])
strGlobalColorSelector					= input.string 	(defval = "Allen",		title = "Color Selector",				group = globalGroupTimeframe,
			  options					=				["Allen", "Ultr", "Mono"])


/// Heikin Ashi ───────────────────────


showGlobal_HknAshi						= input.bool	(defval = true,			title = 'Activar Heikin Ashi',			group = 'Heikin Ashi mode',				tooltip = strGlobalKeikinAshiTooltip)

vGlobalHeiAsTicker						= ticker.heikinashi(syminfo.tickerid)
[heAsGblO, heAsGblH, heAsGblL, heAsGblC]= request.security(vGlobalHeiAsTicker, timeframe.period, [open, high, low, close])

gbl_Source_O							= showGlobal_HknAshi ? heAsGblO : open
gbl_Source_H							= showGlobal_HknAshi ? heAsGblH : high
gbl_Source_L							= showGlobal_HknAshi ? heAsGblL : low
gbl_Source_C							= showGlobal_HknAshi ? heAsGblC : close
gbl_Source_3							= showGlobal_HknAshi ? (heAsGblH + heAsGblL + heAsGblC) / 3 : hlc3


/// Switch ────────────────────────────


[_co_gbl_buy,	_co_gbl_sell,	_co_gbl_long,	_co_gbl_short,	_co_gbl_up,	_co_gbl_dn,	_co_gbl_neutral]		= switch	strGlobalColorSelector
	"Allen"								=> [#33FFAC,		#CCF8FF,		#30d453,		#EA1889,		#30d453,		#0035FF,		#CCF8FF]
	"Ultr"								=> [#00E7FD,		#FE0CB6,		#30d453,		#EA1889,		#30d453,		#0035FF,		#121F3D]
	"Mono"								=> [#CCF8FF,		#0C1633,		#CCF8FF,		#121F3D,		#E6F7FF,		#121F3D,		#676B79]

	// "Light"							=> [#2962FF,		#F23645,		#2962FF,		#F23645,		#FCFF8F]
	// "Inverse"						=> [#ADEB42,		#EA1889,		#33FFAC,		#CCF8FF,		#CCF8FF]
	// "Classic"						=> [#B1FF05,		#D11C36,		#B1FF05,		#D11C36,		#5C818A]


/// Colors ───────────────────────────


_co_gbl_white							= #E6F7FF							//	CitiAccentUltraLightBlue
_co_gbl_pink							= #FFB7FF							//	WavBehPink20
_co_gbl_sky								= #0CF2F2							//	WavBehAqua50
_co_gbl_mint							= #4FFFC0							//	AllenMint50
_co_gbl_green							= #30d453							//	AllenGreen50
_co_gbl_yellow							= #FDF43C							//	BrLiYel30
_co_gbl_blue							= #0035FF							//	ARoPrimary
_co_gbl_black							= #0C1633							//	PlatziBlue80
_co_gbl_light							= #FBFD73							//	BrLiYel10
_co_gbl_txt_dark						= #121F3D							//	PlatziBlue70


BrLiYel10								= #FBFD73
WavBehPink20							= #FFB7FF
PlatziGreen30							= #ADEB42
PlatziBlue70							= #121F3D
AllenSky10								= #CCF8FF
AllenMint60								= #33FFAC
AllenWine60								= #E8114B


/// Types ─────────────────────────────


type globalTypeOHL
	float O						    	= open
	float H				    			= high
	float L				    			= low
	float C				    			= close
	float V				    			= volume
	int   I				    			= bar_index


/// Functions ─────────────────────────


/// ─── function timeframe
FunGlobalTimeFrame(_timeframe) =>
	switch _timeframe
		'Grafico'						=> timeframe.period
		'1 seg'							=> 'S'	
		'5 seg'							=> '5S'
		'10 seg'						=> '10S'
		'15 seg'						=> '15S'
		'30 seg'						=> '30S'
		'1 min'							=> '1'	
		'3 min'							=> '3'	
		'5 min'							=> '5'
		'15 min'						=> '15'
		'30 min'						=> '30'
		'1 Hora'						=> '60'
		'2 Horas'						=> '120'
		'3 Horas'						=> '180'
		'4 Horas'						=> '240'
		'8 horas'						=> '480'
		'Dia'							=> 'D'
		'1 Dia'							=> '1D'
		'Semana'						=> 'W'
		'1 Semana'						=> '1W'
		'Mes'							=> 'M'
		'1 Mes'							=> '1M'

/// ─── function location vertical
FunGlobalVertical(_vertical) =>
	switch _vertical
		'Arriba'						=> 'top'
		'Medio'							=> 'middle'
		'Abajo'							=> 'bottom'

/// ─── function location horizontal
FunGlobalHorizontal(_horizontal) =>
	switch _horizontal

		'Izquierda'						=> 'left'
		'Centro'						=> 'center'
		'Derecha'						=> 'right'

/// ─── function position
FunGlobalPositionIn(_position) =>
	switch _position
		'Externo'						=> 'outside'
		'Interno'						=> 'inside'

/// ─── function text size
FunGlobalTextSize(_textsize) =>
	switch _textsize
		'Mini'							=> size.tiny
		'Pequeño'						=> size.small
		'Normal'						=> size.normal
		'Grande'						=> size.large
		'Enorme'						=> size.huge
		'Auto'							=> size.auto

/// ─── function line style
FunGlobalLineStyle(_linestyle) =>
	switch _linestyle
		'⎯⎯⎯⎯'							=> line.style_solid
		'----'							=> line.style_dashed
		'····'							=> line.style_dotted

/// ─── function Days of Week
FunGlobalDayofWeek(_days) =>
	switch _days
		1								=> 'Domingo'
		2								=> 'Lunes'
		3								=> 'Martes'
		4								=> 'Miercoles'
		5								=> 'Jueves'
		6								=> 'Viernes'
		7								=> 'Sabado'

/// ─── function Timezone
FunGlobalTimeZone(_timezone) =>
	switch _timezone
		'NYSE'							=> 'UTC-5'
		'New York'						=> 'America/New_York'
		'Chicago'						=> 'America/Chicago'
		'Londres'						=> 'Europe/London'
		'Tokyo'							=> 'Asia/Tokyo'
		'Shanghai'						=> 'Asia/Shanghai'
		'Sydney'						=> 'Australia/Sydney'
		'Argentina'						=> 'America/Argentina/Buenos_Aires'


/// ─── function tsi
FunGlobalCalculateTSI(_speed, _x) =>
	_plus								= 50
	_source								= gbl_Source_C

	_long								= 25			// 6

	_short								= 0				// 13
	_signal								= 0				// 5

	switch _speed
		'fast' =>
			_short						:= 5
			_signal						:= 14

		'slow' =>
			_short						:= 13
			_signal						:= 13

	_tsi								= _x * ta.tsi(_source, _short, _long) + _plus
	_tsi_ema							= ta.ema(_tsi, _signal)

	[_tsi, _tsi_ema]

/// ─── function timeframe conditional
FunGlobalCalculateTimeframeIf(_timeframe) =>
	_tonumber							= str.tonumber(_timeframe)
	_minor_dayly						= _tonumber < 500
	_operat_minor						= 30
	_operat_medium						= _tonumber * 3
	_operat_mayor						= _tonumber * 2
	_conditional						= _tonumber >= 45 ? _operat_mayor : _tonumber <= 14 ? _operat_minor : _operat_medium
	_result								= _minor_dayly ? str.tostring(math.round(_conditional)) : timeframe.period


/// ─── Instances ─────────────────────


gblSource								= globalTypeOHL.new()

/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────


/// Vars ──────────────────────────────


/// ─── Colors ───
colorxTsiMuBaseLong						= _co_gbl_long
colorxTsiMuBaseShort					= _co_gbl_blue

colorxTsiMuTendency						= _co_gbl_neutral
colorxTsiMuMultitimeframe				= _co_gbl_yellow
colorxTsiMuDivergBg						= _co_gbl_black

colorxTsiMuDivergLong					= _co_gbl_buy
colorxTsiMuDivergShort					= _co_gbl_sell
colorxTsiMuDivergNone					= color.new(_co_gbl_black,			100)
colorxTsiMuText							= color.new(_co_gbl_txt_dark,		0)

/// ─── Inputs ───
globalTSIGroupTimeframe					= 'TSI & Divergences'
vxTsiMuLong								= input.int		(defval = 6,		title = 'Longitud de Compra',			group = globalTSIGroupTimeframe)
vxTsiMuShort							= input.int		(defval = 13,		title = 'Longitud de Venta',			group = globalTSIGroupTimeframe)

/// ─── divergences ───
vxTsiMuLBR								= 5									//	Corrección a la derecha
vxTsiMuLBL								= 5									//	Corrección a la izquierda
vxTsiMuRangeUpper						= 30								//	Rango de corrección maximo
vxTsiMuRangeLower						= 2									//	Rango de corrección minimo
/// ─── Show ───
showxTsiMuPlotDiverg					= input.bool	(defval = true,		title = 'Divergencias',					group = globalTSIGroupTimeframe,		inline = 'diverg show')
showxTsiMuPlotDivergScalp				= input.bool	(defval = true,		title = 'Scalp',						group = globalTSIGroupTimeframe,		inline = 'diverg show')
showxTsiMuCloudOn						= input.bool	(defval = true,		title = 'TSI Cloud',					group = globalTSIGroupTimeframe)
vxTsiMu_RsiLength						= 14

vxTsiMuIfFast							= true
vxTsiMuIfSlow							= false

vxTsiMuFast_x							= 125
vxTsiMuSlow_x							= 125

vxTsiMuMultiT_x							= 170
vxTsiMuTrend_x							= 170

/// Functions ─────────────────────────


/// function tendency (smooth & tsi calculate)
FunxTsiMuCalculateTendencyTSI() =>
	_source								= gbl_Source_C
	_long								= 6
	_short								= 13
	_signal								= 5

	_change								= ta.change(_source)
	_smooth_single						= ta.ema(_change, _long)
	_smooth_double						= ta.ema(_smooth_single, _short)

	_x									= 50
	_plus								= 50

	_smooth								= _smooth_double
	_smooth_abs							= math.abs(_smooth_double)
	
	_trend_tsi							= _x * (_smooth / _smooth_abs) + _plus
	_trend_ema							= ta.ema(_trend_tsi, _signal)

	[_trend_tsi, _trend_ema]

/// INSTANCES ─────────────────────────


/// Tendency
/// instances function calculate tendency  Tsi
[ixTsiMuCalcTrendTSI, ixTsiMuCalcTrendEMA]	= FunxTsiMuCalculateTendencyTSI()
/// fill color tendency
insxTsiMuCloudTrendColor				= ixTsiMuCalcTrendTSI	> ixTsiMuCalcTrendEMA	? colorxTsiMuBaseLong	: ixTsiMuCalcTrendTSI	<= ixTsiMuCalcTrendEMA	? colorxTsiMuBaseShort		: na


/// Multitimeframe
/// instance function calculate multitimeframe Tsi
[ixTsiMuCalcMultiTfTSI, ixTsiMuCalcMultiTfEMA]= FunGlobalCalculateTSI('slow', vxTsiMuMultiT_x)
/// instance function global timeframe
ixTsiMuCalcMultiTfTSIRange				= str.tonumber(FunGlobalTimeFrame(strGlobalMultiTimeFrame)) > 500				? 
										  FunGlobalCalculateTimeframeIf(FunGlobalTimeFrame(strGlobalMultiTimeFrame))	:
										  timeframe.period
/// ─── Timeframe multitimeframe Tsi
arrxTsiMuMultiTimeframeTicker			= request.security(syminfo.tickerid,	ixTsiMuCalcMultiTfTSIRange,	ixTsiMuCalcMultiTfTSI,	barmerge.gaps_on)
/// ─── plot color
insxTsiMuMultiTimefPlotColor			= ixTsiMuCalcMultiTfTSI	> ixTsiMuCalcMultiTfEMA		?
										  colorxTsiMuBaseLong								:
										  ixTsiMuCalcMultiTfTSI	<= ixTsiMuCalcMultiTfEMA	?
										  colorxTsiMuBaseShort								:
										  na

/// Principal
/// instance function calculate principal TSI
/// instance function Tsi fast
[ixTsiMuCalcTsiFast, ixTsiMuCalcEmaFast]= FunGlobalCalculateTSI('fast', vxTsiMuFast_x)
/// instance function Tsi slow
[ixTsiMuCalcTSI, ixTsiMuCalcEMA]		= FunGlobalCalculateTSI('slow', vxTsiMuSlow_x)
/// ─── plot color
insxTsiMuPlotColor						= ixTsiMuCalcTSI			> ixTsiMuCalcEMA			? colorxTsiMuBaseLong	: ixTsiMuCalcTSI			<= ixTsiMuCalcEMA			? colorxTsiMuBaseShort	: na
/// ─── fill cloud color
insxTsiMuCloudColor						= ixTsiMuCalcTSI			> ixTsiMuCalcEMA			? colorxTsiMuBaseLong	: ixTsiMuCalcTSI			<= ixTsiMuCalcEMA			? colorxTsiMuBaseShort	: na


/// DISPLAY ───────────────────────────


/// ─── Plot
/// plot sobrecompra/sobreventa
plot(110,								color = color.from_gradient(ixTsiMuCalcTSI,	60,	100,			color.new(_co_gbl_black, 70),		color.new(_co_gbl_sell, 0)),		linewidth = 6)
plot(-10,								color = color.from_gradient(ixTsiMuCalcTSI,	0,	40,				color.new(_co_gbl_buy, 0),			color.new(_co_gbl_black, 70)),		linewidth = 6)

 /// plot multi timeframe
// insxTsiMuMultitimefTsiPlotLine			= plot(showxTsiMuTSIMultitimeframe	? arrxTsiMuMultiTimeframeTicker : na,							color = color.new(colorxTsiMuMultitimeframe, 60),		linewidth = 2)
// insxTsiMuMultitimefEmaPlotLine			= plot(showxTsiMuTSIMultitimeframe	? ta.ema(arrxTsiMuMultiTimeframeTicker, vxTsiMuSignal) : na,	color = color.new(colorxTsiMuMultitimeframe, 60),		linewidth = 1)

/// plot tendency TSI
insxTsiMuTendencyTsiPlotLine			= plot(showxTsiMuTSITendency ? ixTsiMuCalcTrendTSI : na,											color = color.new(colorxTsiMuTendency, 75),			linewidth = 1)
insxTsiMuTendencyEmaPlotLine			= plot(showxTsiMuTSITendency ? ixTsiMuCalcTrendEMA : na,											color = color.new(colorxTsiMuTendency, 50),			linewidth = 1)

/// fill tendency
fill(insxTsiMuTendencyTsiPlotLine, insxTsiMuTendencyEmaPlotLine,																			color = color.new(insxTsiMuCloudTrendColor, 85))

/// plot present TSI
insxTsiMuTsiPlotLine					= plot(showxTsiMuTSIDivergs ? ixTsiMuCalcTSI	: na,												color = color.new(insxTsiMuPlotColor, 20),				linewidth = 2)		//	plot TsiSI
insxTsiMuEmaPlotLine					= plot(showxTsiMuTSIDivergs ? ixTsiMuCalcEMA	: na,												color = color.new(insxTsiMuPlotColor, 20),				linewidth = 2)		//	plot EMA

/// fill present
fill(insxTsiMuTsiPlotLine, insxTsiMuEmaPlotLine,																							color = showxTsiMuCloudOn ? color.new(insxTsiMuCloudColor, 70) : na)						//	fill


/// DIVERGENCES ───────────────────────


insxTsiMuPLFound						= na(ta.pivotlow(ixTsiMuCalcTSI, vxTsiMuLBL, vxTsiMuLBR)) ? false : true
insxTsiMuPHFound						= na(ta.pivothigh(ixTsiMuCalcTSI, vxTsiMuLBL, vxTsiMuLBR)) ? false : true

FunxTsiMu_inRange(cond) =>
	insxTsiMuBars						= ta.barssince(cond == true)
	vxTsiMuRangeLower					<= insxTsiMuBars and insxTsiMuBars <= vxTsiMuRangeUpper


/// Compra regular ────────────────────


/// ─── Osc: Higher Low ─ Price: Lower Low
tsiDiInsOSCHL							= ixTsiMuCalcTSI[vxTsiMuLBR]		> ta.valuewhen(insxTsiMuPLFound, ixTsiMuCalcTSI[vxTsiMuLBR], 1)	and FunxTsiMu_inRange(insxTsiMuPLFound[1])
tsiDiInsPRICELL							= low[vxTsiMuLBR]					< ta.valuewhen(insxTsiMuPLFound, low[vxTsiMuLBR], 1)
tsiDiInsBULLCond						= showxTsiMuPlotDiverg				and tsiDiInsPRICELL	and tsiDiInsOSCHL	and insxTsiMuPLFound

plotshape(showxTsiMuTSIDivergs			and	tsiDiInsBULLCond				? ixTsiMuCalcTSI[vxTsiMuLBR] : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Compra',
			  text						= ' Buy ',
			  size						= size.auto,
			  style						= shape.labelup,
			  location					= location.belowbar,
			  color						= color.new(colorxTsiMuDivergLong, 10),
			  textcolor					= colorxTsiMuText,
			  force_overlay				= true)


/// Compra scalp ──────────────────────


/// ─── Osc: Lower Low ─ Price: Higher Low
tsiDiInsOSCLL							= ixTsiMuCalcTSI[vxTsiMuLBR]		< ta.valuewhen(insxTsiMuPLFound, ixTsiMuCalcTSI[vxTsiMuLBR], 1)	and FunxTsiMu_inRange(insxTsiMuPLFound[1])
tsiDiInsPRICEHL							= low[vxTsiMuLBR]					> ta.valuewhen(insxTsiMuPLFound, low[vxTsiMuLBR], 1)
tsiDiInsHiddenBullCond					= showxTsiMuPlotDivergScalp		and tsiDiInsPRICEHL	and tsiDiInsOSCLL	and insxTsiMuPLFound

plotshape(showxTsiMuTSIDivergs			and tsiDiInsHiddenBullCond			? ixTsiMuCalcTSI[vxTsiMuLBR] : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Compra trend',
			  text						= ' ▲ % ',
			  size						= size.auto,
			  style						= shape.labelup,
			//   style						= shape.triangleup,
			  location					= location.belowbar,
			  color						= color.new(colorxTsiMuDivergLong, 30),
			  textcolor					= colorxTsiMuText,
			  force_overlay				= true)


/// Venta regular ─────────────────────


/// ─── Osc: Lower High ─ Price: Higher High
tsiDiInsOSCLH							= ixTsiMuCalcTSI[vxTsiMuLBR]		< ta.valuewhen(insxTsiMuPHFound, ixTsiMuCalcTSI[vxTsiMuLBR], 1) and FunxTsiMu_inRange(insxTsiMuPHFound[1])
tsiDiInsPRICEHH							= high[vxTsiMuLBR]					> ta.valuewhen(insxTsiMuPHFound, high[vxTsiMuLBR], 1)
tsiDiInsBEARCond						= showxTsiMuPlotDiverg				and tsiDiInsPRICEHH	and tsiDiInsOSCLH	and insxTsiMuPHFound

plotshape(showxTsiMuTSIDivergs			and tsiDiInsBEARCond				? ixTsiMuCalcTSI[vxTsiMuLBR] : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Etiqueta de Venta',
			  text						= ' Sell ',
			  size						= size.auto,
			  style						= shape.labeldown,
			  location					= location.abovebar + 5,
			  color						= color.new(colorxTsiMuDivergShort, 10),
			  textcolor					= colorxTsiMuText,
			  force_overlay				= true)


/// Venta scalp ───────────────────────


/// ─── Osc: Higher High ─ Price: Lower High
tsiDiInsOSCHH							= ixTsiMuCalcTSI[vxTsiMuLBR]		> ta.valuewhen(insxTsiMuPHFound, ixTsiMuCalcTSI[vxTsiMuLBR], 1) and FunxTsiMu_inRange(insxTsiMuPHFound[1])
tsiDiInsPRICELH							= high[vxTsiMuLBR]					< ta.valuewhen(insxTsiMuPHFound, high[vxTsiMuLBR], 1)
tsiDiInsHiddenBearCond					= showxTsiMuPlotDivergScalp		and tsiDiInsPRICELH	and tsiDiInsOSCHH	and insxTsiMuPHFound

plotshape(showxTsiMuTSIDivergs			and tsiDiInsHiddenBearCond			? ixTsiMuCalcTSI[vxTsiMuLBR] : na,
			  offset					= -vxTsiMuLBR,
			  title						= 'Venta trend',
			  text						= ' ▼ % ',
			  size						= size.auto,
			  style						= shape.labeldown,
			//   style						= shape.triangledown,
			  location					= location.abovebar,
			  color						= color.new(colorxTsiMuDivergShort, 30),
			  textcolor					= colorxTsiMuText,
			  force_overlay				= true)

/// ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
